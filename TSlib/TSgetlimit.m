% TSgetlimit returns the vector of integer indices specified by% the contents of those subfields of Experiment.Info that specify active% subjects, sessions, trials, and phases. For example, when one of these% fields contains 'all', TSgetlimit converts that to the vector containing% all the relevant index numbers. If, for example, one subject has 12 % sessions while another has only 3, TSlimit returns 1:12 for the one% subject and the vector 1:3 for the other. When it is called, it is passed% as its first argument the contents of one of these 4 fields% (Experiment.Info.ActiveSubjects, Experiment.Info.ActiveSessions, etc). It% gets passed as its 2nd argument the contents of the field that specifies% the current total number of the relevant entity. For example, when the% caller wants a vector for the subjects when the first argument is 'all',% then the caller passes as the 2nd argument the contents of the% Experiment.NumSubjects field. When it wants the vector for the active% sessions for a given subject, it passes as the 2nd argument the contents% of the Experiment.Subject(S).NumSessions field.%%   Syntax:: TSgetlimit(indexspec, largestindex)%   indexspec specifies the field whose contents need a vector intepretation,%   for example Experiment.Info.ActiveSubjects (see TSlimit)%   %   largestindex specifies the greatest possible value for a given%   numerical index, for example Experiment.NumSubjects%%   This function is a support function used by TSapplystat, TSsessionstat,W%   and TStrialstat to compute the limits as stored by TSlimit.%   It is a helper function, and not intended to be called by%   the user.%   TSgetlimit returns an array of integers between 1 and largestindex. The%   parameter ranges determines these integers.%%   DOCUMENT FROM MANUAL USING TSlimit AS GUIDEfunction [ result ] = TSgetlimit(indexspec, largestindex)if evalin('base','isempty(who(''global'',''Experiment''))')        % Verifies that an Experiment structure exists    error('There is no experiment structure defined.');            % Will not execute if no Experiment has been set upend;global Experiment; result = [];if (largestindex==0)    return;                              % If there is no largest index, then return an empty listelseif strcmp(indexspec,'all')     result= 1:largestindex;                  % Use whole rangeelseif (iscell(indexspec) && numel(indexspec)==2 && strcmp(indexspec{2},'a')) % Check for absolute subject mode (cell array containing array and 'a')    result= indexspec{1}; % Get specified subjects- result is now the vector of ID#s    if sum(~ismember(result,Experiment.Subjects))>0 % Make sure each is in experiment        missing = result(~ismember(result,Experiment.Subjects));        if numel(missing)==1            error(['Subject ' num2str(missing(1)) ' is not in the current experiment'])        else error(['Subjects ' num2str(missing) ' are not in the current experiment'])        end;        error('Subject(s)  not in current experiment');    end    result = find(ismember(Experiment.Subjects,result));  % Get the indices of the specified subject IDselseif numel(indexspec)==1    result = doscalar(indexspec, largestindex);    % If range is a single number then use it (call doscalar)elseif isnumeric(indexspec)                        % If element is a simple array, then use all elements    for range = indexspec        result = [result doscalar(range,largestindex)];    end;% this part deals with cell arrays- no longer using these, except for the% 'a' flag.% elseif iscell(indexspec)  % Check this section                                          % Check for a cell array%     for range = indexspec                                                               % Range is a cell array so go through each element%         rangeval = range{1};                                                            % Get value of cell%         if numel(rangeval)==1 result = [result doscalar(rangeval,largestindex)];        % Element is a scalar%         elseif numel(rangeval)==2 result = [result ...%                 doscalar(rangeval(1),largestindex):doscalar(rangeval(2),largestindex)]; % Convert an array of two elements into a range%         elseif isnumeric(rangeval)                                                      % If element is a simple array, then use all elements%             for range1 = rangeval%                 result = [result doscalar(range1,largestindex)];%             end;%         else%             error('Limiting range incorrectly specified');      % A range element in the cell array is not of the right type%         end;%     end;                                      % Return error if indexspec has wrong formend;result = unique(result);                         % Sort results and remove duplicates function [result] = doscalar(val,largestindex) % Range is a single value, so determine it% Check to make sure that singleval is integer, error check for - numberif val==Inf     % inf    result = largestindex;elseif val>=1   % positive integer    if (val>largestindex)         result = largestindex;    else         result = val;    endelseif (val>=0 && val<1)            % positive percentage    result = 1:round(largestindex*val);%     result = round((val*(largestindex-1)))+1; -- pretty sure this is just%     a wrong calcuationelseif (val>-1 && val<0)    % negative percentage    result = round(largestindex*(val+1)+1):largestindex;elseif val<=-1      % negative integer    result = largestindex+val+1;else     error(['Index of ' num2str(val) ' is not if legal form']);end