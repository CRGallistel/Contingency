function [codes_out] = TSdeclareeventcodes( )% TSDECLAREEVENTCODES Loads current Event Codes into the global workspace%   Loads the Event Codes into the global workspace, declaring global in%   caller and base.%%   - First checks the experiment structure for Experiment.Codes%   - If codes are found, aka struct exists and is not empty struct, then%   load these fields as global variables%   - If no codes are found, check the preferences for default codes. If no%   codes are found, throw a warning and return.%%   S = TSdeclareeventcodes;%   Does not declare event codes globally, returns the code structure instead.%	This code structure may be useful if you need to get a list of all codes %   or something. Rather than doing who('global') and trying to sort out codes%   from other global variables, you should do fieldnames(TSdeclareeventcodes)%   to get a list of all codes.global Experiment;if evalin('base','isempty(who(''global'',''Experiment''))') || ...        ~isfield(Experiment, 'EventCodes') || isempty(Experiment.EventCodes) || isempty(fieldnames(Experiment.EventCodes))    %disp('No codes were found in Experiment to unpack.');    if ~ispref('TSLib','DefaultEventCodes')        disp('No EventCodes found in default or Experiment.');        return;    end    %disp('Found DefaultEventCodes');    codes = getpref('TSLib', 'DefaultEventCodes');else    codes = Experiment.EventCodes;endif nargout > 0    codes_out = codes;    return;endfn = fieldnames(codes);baseeval{numel(fn)} = '';calleval{numel(fn)} = '';thiseval{numel(fn)} = '';for x = 1:numel(fn)    baseeval{x} = [' if isempty(whos(''' fn{x} ''')) global ' fn{x} '; end;'];    calleval{x} = [' global ' fn{x} ';'];    thiseval{x} = [' global ' fn{x} '; ' fn{x} ' = codes.' fn{x} ';'];endevalin('caller', [calleval{:}]);evalin('base', [baseeval{:}]);eval([thiseval{:}]);% for(x = 1:length(fn))%    evalin('base',['if isempty(whos(''' fn{x} ''')) || isempty(whos(''global'',''' fn{x} ''')) global ' fn{x} '; end']);%     %    evalin('caller',['global ' fn{x}]);    % '; ' fn{x} ' = ' int2str(codes.(fn{x})) ';' ]);%     %    eval(['global ' fn{x} '; ' fn{x} ' = codes.' fn{x} ';']);% end