% TSLOADSESSIONS    Load Session data into Experiment structure.%   TSLOADSESSIONS(NEWDIR) load the sessions from a directory specified by%   NEWDIR. NEWDIR denotes the directory to find files which contain%   session data. Modified by CRG 10/20/09. Also loads MedPC code files%   into the Experiment.Programs field. TSloadsessions calls a load function,%   which must be tailored to the peculiarities of the raw data files%   generated by the experiment-control software in a given laboratory. The%   load function that it calls is specified in the%   Experiment.Info.LoadFunction field. TSload function will crash if the%   load function cannot interpret the raw data files.%%  Syntax  [result,SubSes] = TSloadsessions(newdir,delimiter)%%   You should not use TSloadsessions without first calling%   TSsetloadparameters. TSloadsessions reads from the%   Experiment.Info.OverWriteMode, Experiment.Info.InputTimeUnit, and%   Experiment.Info.OutputTimeUnit, which are the fields whose contents are%   set by TSsetloadparameters. Typically, the contents of these 3 fields%   are 'true' [without the single quotes}, .02, 1, respectively. The value%   most likely to vary from lab to lab is the second one (.02), which is%   the time unit in seconds of the raw data generated by MedPC or some%   similar experiment-control code.%%   The time units used in the file's timestamps will be converted to new%   units when they are loaded. The input unit and output unit should be%   specified in seconds using TSsetloadparameters.%%   Only files containing the current fileprefix will be loaded. The%   default prefix is '!'. This useful feature allows you to select which%   sessions to load in a directory by adding or removing the !. You can%   set whatever prefix you like, or set it to blank, using%   TSsetloadparameters. If it is set to an empty string, then all files%   will be loaded.%%   You should also select which function to use to parse the input files.%   This is done by setting the LoadFunction argument with%   TSloadparameters. The default is TSloadtab, which loads tab delimited%   text files using our generic TSdata format. LoadFunction can be set to%   an integer, which will select one of the functions from the following%   list, or a function handle,%%   TSLOADSESSIONS, with no parameters gives a directory selection box from%   which to load the sessions. To simply use the current matlab directory,%   use TSloadsessions( cd );%%   See also TSSETLOADPARAMETERS, TSSETOVERWRITEMODE, TSLOADMEDPC,%   TSLOADSTDTAB, TSLOADSTDCSV, TSLOADSTDXLS% Updated: 10/21/2009 by Randy Gallistelfunction [result,SubSes] = TSloadsessions(newdir, delimiter) % CRG added% SubSes output 4/9/2010result=0;SubSes=[]; % initializingif evalin('base','isempty(who(''global'',''Experiment''))')  % Verifies that an Experiment structure exists    error('There is no experiment structure');    result=0;    return;end;global Experimentdelim = false;if nargin > 1 % a delimiter character for the load function is specified    if ischar(delimiter) && strcmp('\',delimiter(1)) && length(delimiter)==2        delim = true;    else        fprintf('\n\n2nd input argument does not specify\na delimiter (e.g, ''\\t'').It will be ignored.\nLoad function will be called without specification of a delimiter.\n')    endend% % % the following was copied & pasted from David F's code that he added% % 2-28-07 by DF to a previous version of TSloadsessions so as to add the% % importation of the MedPC program for a session. There is more code added% % near end% % if evalin('base','isempty(who(''global'',''Program_filename''))')  % Checks to see if a preloaded Program_filename exists.%     disp('No Preloaded Program filename');% else%     global Program_filename; %else declare it for use.% end;% % end of added codeif ~isfield(Experiment.Info,'OverWriteMode') ||... % No OverWriteMode field        isempty(Experiment.Info.OverWriteMode)      % or it's empty        Experiment.Info.OverWriteMode = true; % Create field & set trueendoverwritemode = Experiment.Info.OverWriteMode;if ~isfield(Experiment.Info,'FilesLoaded') % No FilesLoaded field    Experiment.Info.FilesLoaded = []; % Create & set emptyendif ~isfield(Experiment.Info,'InputTimeUnit') ||...% No InputTimeUnit field        isempty(Experiment.Info.InputTimeUnit)     %  or it's empty    Experiment.Info.InputTimeUnit = input(sprintf('\nWhat is the time unit in seconds\nfor the time stamps in the raw data? (e.g, .01) '));endcurrentunit = Experiment.Info.InputTimeUnit;if ~isfield(Experiment.Info,'OutputTimeUnit') ||...% No OutputTimeUnit field        isempty(Experiment.Info.OutputTimeUnit)    % or it's empty    Experiment.Info.OutputTimeUnit = input(sprintf('\nWhat is the desired time unit in seconds\nfor the time stamps in the data in the ''TSData''\nfield in the Experiment structure? (e.g, 1) '));enddesiredunit = Experiment.Info.OutputTimeUnit;if ~isfield(Experiment.Info,'LoadFunction') % No LoadFunction field    Str = char('','There is no LoadFunction field in Experiment.Info.',...        'A load function interprets your raw data files',...        'for TSloadsession. Consult Chapter 5 of the TS Manual',...        'to see if any of the already written load functions',...        'can interpret your raw data files. If you see one you believe',...        'will work, type Experiment.Info.LoadFunction = ''@<functionname>''',...        'at the Matlab command line to enter the name of that function',...        'into the LoadFunction field of Experiment.Info. If none',...        'of the already written load functions works, you will need',...        ' to write one that can interpret your data files.','');    return    elseif isempty(Experiment.Info.LoadFunction) % LoadFunction field is empty    Str = char('','The LoadFunction field in Experiment.Info is empty.',...        'A load function interprets your raw data files',...        'for TSloadsession. Consult Chapter 5 of the TS Manual',...        'to see if any of the already written load functions',...        'can interpret your raw data files. If you see one you believe',...        'will work, type Experiment.Info.LoadFunction = ''@<functionname>''',...        'at the Matlab command line to enter the name of that function',...        'into the LoadFunction field of Experiment.Info. If none',...        'of the already written load functions works, you will need',...        ' to write one that can interpret your data files.','');    returnendPrf = [];Ext = [];P = false;E = false;ShortName = false;if isfield(Experiment.Info,'FilePrefix') && ~(length(Experiment.Info.FilePrefix)<1)    % There is a FilePrefix field and it's not empty    Prf = Experiment.Info.FilePrefix; % Set Prf to its contents    P = true;endif isfield (Experiment.Info,'FileExtension') && ~(length(Experiment.Info.FileExtension)<1) % There is a FileExtension field    Ext = Experiment.Info.FileExtension;     % Set Ext to its contents    E = true;endif ~exist('Prf','var') && ~exist('Ext','var') % No FilePrefix field & no FileExtension field        Str = char('','There is neither a FilePrefix field in Experiment.Info',...        'nor a FileExtension field to enable this function to',...        'distinguish data files from other files in this folder.',...        'Most folders contain hidden additional files, which, if',...        'read as data files, will cause the load program to crash.',...        'These hidden files usually have very short names. If',...        'you do not now specify either a prefix character or an',...        'extension, the load function will ignore all files whose',...        'name has three characters or less.');        LV = strcmp(input(sprintf('\nRespond ''Prf'' or ''Ext'' or ''Both'' if the data files\nhave a prefix or extension or both that\ndistinguishes them from non-data files.\nIf neither, hit Rtn\n'),'s'),...        {'Prf' 'Ext' 'Both'}); % 3D logical vector indicating whether a         % prefix is to be used to indicate data files or an extension or both       if LV(1) % if a prefix is to be used              Experiment.Info.FilePrefix = input('Initial character(s) in file name indicating data file: ','s');       Prf = Experiment.Info.FilePrefix;       P = true;          elseif LV(2) % else if an extension is to be used              Experiment.Info.FileExtension = input('Extension indicating a data file: ','s');       Ext = Experiment.Info.FileExtension;       E = true;          elseif LV(3) % both a prefix and an extension to be used              Experiment.Info.FilePrefix = input('Initial character(s) in file name indicating data file: ','s');       Experiment.Info.FileExtension = input('Extension indicating a data file: ','s');       Prf = Experiment.Info.FilePrefix;       Ext = Experiment.Info.FileExtension;       P = true;       E=true;   end   end % of checking for FilePrefix and/or FileExtension fields in Experiment.Infoif isempty(Prf) && isempty(Ext) % No prefix and no extension specified    ShortName = true; % Don't try to load files with <3 characters in their nameend    nargs = nargin;savedir = cd;if nargs==0 || strcmp(newdir, '')   % Prompts user to select a directory if no such directory was specified    newdir = uigetdir(pwd,'Please locate session data folder');% Not sure why I need pwd, doesn't seem to use current directory otherwise -- APK    if ~ischar(newdir)        result = 0;        return;    endend;cd(newdir);S = dir;if isa(Experiment.Info.LoadFunction, 'function_handle')    LoadFunction = Experiment.Info.LoadFunction;elseif ischar(Experiment.Info.LoadFunction)    LoadFunction = str2func(Experiment.Info.LoadFunction);else    error('TSloadsessions:UnrecognizedLoadFunction', 'LoadFunction should be a function handle or a string name of a function.');end               for x = 1:length(S) % Searches  directory for files starting with specified prefix    % or with specified extension or with both prefix & extension        filename = S(x).name;        if P && E % data files specified with a prefix and an extension        if (length(filename) < length(Prf)) || (length(filename) < length(Ext)) % file name not long enough            continue % go on to next file        end        elseif P % data files specified with a prefix        if length(filename) < length(Prf) % file name not long enough            continue % go on to next file        end    elseif E % data files specified with an extension        if length(filename) < length(Ext) % file name not long enough            continue % go on to next file        end    elseif ShortName        if length(filename) <= 3            continue        end    end        if (ShortName ... % Only criterion is that length(filename) > 3    || ((length(Prf)<=length(filename)) && strcmp(Prf,filename(1:length(P))) ...    && strcmp(Ext,filename(end-length(Ext)+1:end))) ... % both Prf & Ext are used and match    || (isempty(Ext) && ~isempty(Prf) && (length(Prf)<=length(filename)) && strcmp(Prf,filename(1:length(Prf)))) ...  % Only Prf is used and it matches    || (isempty(Prf) && ~isempty(Ext) && (length(Ext)<=length(filename)) && strcmp(Ext,filename(end-length(Ext)+1:end)))) ... % Only Ext is used and it matches    &&  (overwritemode ||...                                 % & overwrite is turned on           ~ismember(filename,Experiment.Info.FilesLoaded))%     if (ShortName ||... % Only criterion is that length(filename) > 3 %         (~isempty(Prf) && (length(Prf)<=length(filename)) && strcmp(Prf,filename(1:length(Prf)))) ||...         % Prf is used%         (~isempty(Ext) && (length(Ext)<=length(filename)) && strcmp(Ext,filename(end-length(Ext)+1:end)))) &&... % or Ext is used or both        %     (overwritemode ||...                                 % & overwrite is turned on %           ~ismember(filename,Experiment.Info.FilesLoaded))   % or file has not already been loaded% The above commented out if statement was replaced by the one that% now precedes it July 14, 2017 by CRG because this commented out one did not% deal properly with the case where both a prefix and an extension were% specified              disp(['Processing... ' filename]);                % Initializing        exp = []; subjectnum = []; phase = []; box = []; MatlabStartDate = [];        Notes = ''; Weight = []; Program = 'No Program Loaded';        FileReportedUnits = []; TSdata = []; Duration = [];        % end initializing                if delim % if a delimiter character is to be specified in call to load function            [SUCCESS, exp, subjectnum, phase, box, MatlabStartDate, Duration,...                tsdata, Notes, Weight, timeunit] = LoadFunction(filename,delimiter);   % Executes LoadFunction for every data file        else            [SUCCESS, exp, subjectnum, phase, box, MatlabStartDate, Duration,...                tsdata, Notes, Weight, timeunit] = LoadFunction(filename);        end                if SUCCESS            disp(['Processed: ' filename]);                        %Now do massive warning testing.            if isempty(exp)                warning('TSload:NoExperiment', 'This sesssion data file %s did not provide the experiment id number of the session. Setting to current experiment id number.', filename);                exp = Experiment.Id;            end                        if isempty(subjectnum)                error('TSload:NoSubject', 'This session data file %s did not provide the subject number. Fatal error.', filename);            end            if isempty(phase)                warning('TSload:NoPhase', 'This session data file %s did not provide the phase number.', filename);                phase = 1;            end            if isempty(box)                warning('TSload:NoBox', 'This session data file %s did not provide the box number.', filename);                box = 1;            end                        if isempty(MatlabStartDate)                error('TSloadsessions:NoDate', 'This session data file %s did not provide the date the session was run.', filename);            end            if ~isempty(exp) && exp ~= Experiment.Id                warning('TSload:ExperimentNumberMismatch', 'This session data file %s provided an experiment number that did not match the current experiment.', filename);            end            if ~isempty(timeunit) && timeunit ~= currentunit                warning('TSload:UnitMismatch', 'This session data file %s reported units of %0.5g, and the load parameter reported\ninput units of %0.5g. The datafile''s units will be used.', filename, timeunit, currentunit);                currentunit = timeunit;            end                        sub = find(Experiment.Subjects == subjectnum);            if isempty(sub)%                 error('TSload:SubjectMismatch','The subject %d was not found in this Experiment. Data cannot be added.', subjectnum);                warning('TSload:SubjectMismatch','The subject %d not in this Experiment.', subjectnum);                continue % alteration made by CRG on trial basis 10/20/09            end                         % Now find appropriate location for Session and set the fields                        flag = 0; %% Indicates whether this loop was broken because we found correct place for new session            inc = 0; %% Indicates whether the session count for this subject needs to be increased by 1.            ses = 1; %% Index to the session where new data will be added.            while ses <= length(Experiment.Subject(sub).Session) && ~flag                if isempty(Experiment.Subject(sub).Session(ses).MatlabStartDate)                    inc = 1;                    flag = 1;                elseif Experiment.Subject(sub).Session(ses).MatlabStartDate==MatlabStartDate                    flag = 1;                elseif Experiment.Subject(sub).Session(ses).MatlabStartDate > MatlabStartDate                    Experiment.Subject(sub).Session =[Experiment.Subject(sub).Session(1:ses) Experiment.Subject(sub).Session(ses:end)];                    inc = 1;                    flag = 1;                else                    ses = ses + 1;                end            end            if flag == 0                inc = 1;            end                        SubSes(end+1,:) = [sub  ses]; % CRG4/9/2010            Experiment.Subject(sub).Session(ses).Experiment = exp;            Experiment.Subject(sub).Session(ses).Phase = phase;            Experiment.Subject(sub).Session(ses).Box = box;            Experiment.Subject(sub).Session(ses).MatlabStartDate = MatlabStartDate;            Experiment.Subject(sub).Session(ses).Date = datestr(MatlabStartDate,1);            Experiment.Subject(sub).Session(ses).Notes = Notes;            Experiment.Subject(sub).Session(ses).Weight = Weight;            if isempty(Experiment.StartDate) Experiment.StartDate = datestr(MatlabStartDate,1); end            if datenum(Experiment.StartDate) > MatlabStartDate Experiment.StartDate = datestr(MatlabStartDate,1); end            if isempty(Experiment.EndDate) Experiment.EndDate = datestr(MatlabStartDate,1); end%             if datenum(Experiment.EndDate)<MatlabStartDate Experiment.EndDate = datestr(MatlabStartDate,1); end%             Commented out 7/9/13 when we added code that updates%             Experiment.EndDate after looping through sessions is%             completed (see Lines 249ff)            Experiment.Subject(sub).Session(ses).StartTime = datestr(MatlabStartDate, 14);                        tsdata(:,1) = tsdata(:,1) * currentunit / desiredunit;            if ~isempty(Duration)                dur = Duration;            else                dur = datenum(0,0,0,0,0, tsdata(end, 1) * desiredunit);            end            Experiment.Subject(sub).Session(ses).Duration = [num2str(floor(dur)) ':' datestr(dur-floor(dur),13)];            % Changed by CRG 10/20/09 to read  days:hours:minutes:seconds            Experiment.Subject(sub).Session(ses).MatlabEndDate = MatlabStartDate + dur;            Experiment.Subject(sub).Session(ses).TSData = tsdata;            if (inc) Experiment.Subject(sub).NumSessions = Experiment.Subject(sub).NumSessions + 1; end            result = 1;                        if (~ismember(filename,Experiment.Info.FilesLoaded)) Experiment.Info.FilesLoaded{end+1}=filename; end;                    % MODIFIED 7/30/2007 BY DF.  Now includes time of day.            % The following was added 3/17/07. DF            % If a Program_filename struct exists: It compares subject,            % start date, and start time, and adds the program specified for that session.%             if exist('Program_filename')%                 for x = 1:numel(Program_filename)% %                     DateTime = [Experiment.Subject(sub).Session(ses).Date Experiment.Subject(sub).Session(ses).StartTime(1:end-6) Experiment.Subject(sub).Session(ses).StartTime(end-2:end)];%                     %                    %This section computes the time of day, and the time of%                    %day plus 1 minute. This is because there are cases in%                    %which we start the MEDPC WIZARD at, say, 12:59:59, but the%                    %experiment doesn't start until a second later, ie. 1:00:00. %                     MinuteAfter = Program_filename(x).StartDate;%                     Hours = str2num(MinuteAfter(end-7:end-6)); Minutes = str2num(MinuteAfter(end-4:end-3)); %parse hours and minutes%                     Minutes = Minutes + 1;%                     if Minutes < 10; Minutes = ['0' num2str(Minutes)];           %to create the ':0x' for the minutes%                     elseif Minutes >= 60; Minutes = '00'; Hours = Hours + 1;end  % if minutes = :60, make it :00, and add 1 to hours.%                     Minutes = num2str(Minutes);%                     if Hours > 12; Hours = Hours - 12; end   % if hours is now > 12 (ie, 12:59 + :01 = 13:00), subtract 12:00%                     if Hours < 10; Hours = [' ' num2str(Hours)];  % append a space before the single digit.%                     else Hours = num2str(Hours);end%                     MinuteAfter(end-7:end-3) = [Hours ':' Minutes];%                     %                       %Matches Program with Subject & Time%                     if isequal(Experiment.Subject(sub).SubId, Program_filename(x).Subject) && isequal(DateTime, Program_filename(x).StartDate) || isequal(DateTime, MinuteAfter)%                         disp (['Using Preloaded Program filename ' Program_filename(x).Program '.']);%                         TSaddPrograms(Program_filename(x).Program,sub,ses); %if program filename and start date is given by ruby, this adds the program to the correct place.%                         break;%                     end; % isequal%                 end; % for%             end; %exist%             %End added code%         %The load programs code was commented out 6/1/2010 by CRG because%         this is now dealt with in the DailyAnalysis function.        end;    end;end;% Updating Experiment.EndDatedatenums = [];for s = 1:Experiment.NumSubjects    datenums = [datenums Experiment.Subject(s).Session.MatlabEndDate];endExperiment.EndDate = datestr(max(datenums), 1);cd(savedir);result = 1;